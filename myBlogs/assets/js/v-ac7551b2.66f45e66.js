"use strict";(self.webpackChunkmyBlog=self.webpackChunkmyBlog||[]).push([[182],{3574:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-ac7551b2",path:"/blogs/js-blogs/useproxy.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"blogs/js-blogs/useproxy.md",git:{updatedTime:1630654075e3,contributors:[{name:"HWYD",email:"1165203865@qq.com",commits:1}]}}},1156:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h4 id="proxy-可以对目标对象的读取、函数调用等操作进行代理拦截-然后进行操作处理。它不直接操作对象-而是像代理模式-通过对象的代理对象进行操作-在进行这些操作时-可以添加一些需要的额外操作。主要有这几种情况" tabindex="-1"><a class="header-anchor" href="#proxy-可以对目标对象的读取、函数调用等操作进行代理拦截-然后进行操作处理。它不直接操作对象-而是像代理模式-通过对象的代理对象进行操作-在进行这些操作时-可以添加一些需要的额外操作。主要有这几种情况" aria-hidden="true">#</a> Proxy 可以对目标对象的读取、函数调用等操作进行代理拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。主要有这几种情况：</h4><ol><li>获取对象属性</li><li>设置对象属性值</li><li>遍历对象</li><li>判断对象是否有对应属性</li><li>删除对象属性</li><li>函数调用，call 和 apply 的时候</li><li>new 命令</li></ol><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;dylan&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> myproxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//两个参数，第一个是要代理的目标，如obj对象，第二个是一个对象，里面放需要进行的拦截操作，为空时表示不进行拦截操作</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="get-target-prop" tabindex="-1"><a class="header-anchor" href="#get-target-prop" aria-hidden="true">#</a> get(target, prop)</h4><p>当对象属性被获取时进行拦截， 在 proxy 的第二个参数对象里面添加 get 方法来进行拦截操作(后面的方法也是)，参数 target 表示代理的对象，prop 表示传递的属性名(参数名可以自定义)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> <span class="token string">&#39;dylan&#39;</span><span class="token punctuation">}</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span>   <span class="token comment">//这里我们可以在对象被获取前写一些代码</span>\n    <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>        <span class="token comment">// return的值就是对象属性被获取的值，没有return值会报undefined</span>\n<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n 例如<span class="token operator">:</span> 执行console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>时，对象name属性就被获取，会执行proxy的<span class="token keyword">get</span>函数\n <span class="token comment">//代理数组例子</span>\n <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>\n arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token punctuation">{</span>\n      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> prop <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">&#39;err&#39;</span>\n      <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="set-target-props-val" tabindex="-1"><a class="header-anchor" href="#set-target-props-val" aria-hidden="true">#</a> set(target, props, val)</h4><p>当对象属性值被设置的时拦截，target 表示代理的对象，props 表示属性名，val 表示要设置的值。set 需要返回一个布尔值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Dylan&#39;</span> <span class="token punctuation">}</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> props<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> props<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token comment">//target是obj对象,props是传递进来的&#39;name&#39;属性，val是&#39;newName&#39;</span>\n    target<span class="token punctuation">[</span>props<span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token comment">// 这里是对值的设置，如果设置成 target[props] = &#39;hhh&#39;,那么设置的也会是hhh</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;newName&#39;</span> <span class="token comment">// 对象属性值进行设置</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 打印&#39;newName&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="has-target-prop" tabindex="-1"><a class="header-anchor" href="#has-target-prop" aria-hidden="true">#</a> has(target, prop)</h4><p>判断对象是否有某个属性时进行的拦截操作。target、prop 分别表示代理的对象和传递的属性名。需要返回一个布尔值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token punctuation">{</span>\n  start<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  end<span class="token operator">:</span> <span class="token number">5</span>\n<span class="token punctuation">}</span>\nrange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>range<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> prop <span class="token operator">&gt;=</span> target<span class="token punctuation">.</span>start <span class="token operator">&amp;&amp;</span> prop <span class="token operator">&lt;=</span> target<span class="token punctuation">.</span>end\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> range<span class="token punctuation">)</span> <span class="token comment">// 0不在1和5之间，返回false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="ownkeys-target" tabindex="-1"><a class="header-anchor" href="#ownkeys-target" aria-hidden="true">#</a> ownKeys(target)</h4><p>当对象被遍历时进行的拦截操作。target 表示代理的对象，返回的是一个数组。当我们使用 Object.getOwnPropertyNames()、Object.getOwnPropertySymbol()、 Object.keys()、for...in 这些方法进行遍历时都会触发 ownKeys 方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>假如我们不想让对象的某个属性被遍历\n<span class="token keyword">let</span> userinfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;dylan&#39;</span><span class="token punctuation">,</span>\n  _password<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span> <span class="token comment">//我们不想让这个下划线开头的密码被遍历</span>\n<span class="token punctuation">}</span>\nuserinfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//过滤下划线开头的属性</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>userinfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 只输出[&#39;name&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="deleteproperty-target-prop" tabindex="-1"><a class="header-anchor" href="#deleteproperty-target-prop" aria-hidden="true">#</a> deleteProperty(target, prop)</h4><p>当删除对象的属性时进行的拦截操作。接收两个参数 target、prop,分别指代理的对象、要删除的属性。返回一个布尔值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>假如我们不想让对象的带下划线开头的属性被删除\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;dylan&#39;</span><span class="token punctuation">,</span>\n  _password<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span>\n<span class="token punctuation">}</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;不可删除&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">delete</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">delete</span> obj<span class="token punctuation">.</span>_password\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token comment">//删除失败，会打印&#39;不可删除&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="apply-target-ctx-args" tabindex="-1"><a class="header-anchor" href="#apply-target-ctx-args" aria-hidden="true">#</a> apply(target, ctx, args)</h4><p>用于拦截函数的调用、call 和 reply 操作。target 表示目标对象，ctx 表示目标对象上下文，args 表示目标对象的参数数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">-</span> b\n<span class="token punctuation">}</span>\nsub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;apply&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token comment">//例如代理后把函数执行结果乘2</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//打印6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="construct-target-args" tabindex="-1"><a class="header-anchor" href="#construct-target-args" aria-hidden="true">#</a> construct(target, args)</h4><p>用于拦截 new 命令。返回值必须为对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Exam</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> ExamProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>Exam<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> args<span class="token punctuation">,</span> newTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;construct&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">target</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExamProxy</span><span class="token punctuation">(</span><span class="token string">&#39;dylan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="综合例子" tabindex="-1"><a class="header-anchor" href="#综合例子" aria-hidden="true">#</a> 综合例子</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n   name<span class="token operator">:</span><span class="token string">&#39;dylan&#39;</span><span class="token punctuation">,</span>\n   age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>\n   _secret<span class="token operator">:</span><span class="token string">&#39;123&#39;</span>\n<span class="token punctuation">}</span>\nobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n   <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> val\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n       <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>prop</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> prop <span class="token keyword">in</span> target <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span><span class="token punctuation">,</span>\n   <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>prop</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;不可删除&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n        <span class="token keyword">delete</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>       <span class="token comment">// 触发get</span>\nobj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span>                <span class="token comment">// 触发set</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> obj<span class="token punctuation">)</span>  <span class="token comment">//触发has</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>   <span class="token comment">// 触发ownKeys</span>\n<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age              <span class="token comment">// 触发deleteProperty</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',27),t={render:function(n,s){return p}}}}]);