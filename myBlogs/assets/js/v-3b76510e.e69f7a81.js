"use strict";(self.webpackChunkmyBlog=self.webpackChunkmyBlog||[]).push([[15],{3199:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-3b76510e",path:"/blogs/react-blogs/useContext.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"useContext Hook是什么？",slug:"usecontext-hook是什么",children:[]},{level:3,title:"使用 useContext Hook",slug:"使用-usecontext-hook",children:[]},{level:3,title:"结束语",slug:"结束语",children:[]}],filePathRelative:"blogs/react-blogs/useContext.md",git:{updatedTime:1652968736e3,contributors:[{name:"HWYD",email:"1165203865@qq.com",commits:1}]}}},4622:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6252);const e=(0,t.uE)('<h3 id="usecontext-hook是什么" tabindex="-1"><a class="header-anchor" href="#usecontext-hook是什么" aria-hidden="true">#</a> useContext Hook是什么？</h3><p>是我们在用React编写函数组件时，当一个组件向它的后代组件(子组件以及更往下的组件)传值时，后代组件可以通过 useContext 这个方法去接受传过来的值。</p><h3 id="使用-usecontext-hook" tabindex="-1"><a class="header-anchor" href="#使用-usecontext-hook" aria-hidden="true">#</a> 使用 useContext Hook</h3><p>useContext是在后代组件中用来接收值的，整个流程环境如下：</p><ul><li>首先需要借助 createContext 去创建一个 context 对象，父级组件和他的后代组件共用的这个context对象。</li><li>父组件利用这个context对象去提供值，也就是传值出去。</li><li>后代组件调用 useContext 函数，并把 context 对象作为函数参数，函数的返回值也就是父组件传过来的值。(在这里才用到 useContext Hook)</li></ul><h4 id="案例演示" tabindex="-1"><a class="header-anchor" href="#案例演示" aria-hidden="true">#</a> 案例演示</h4><p>组件层级：App组件 -&gt; First组件 -&gt; Second组件 实现效果：App组件传值， 后代组件(无论是 First 还是 Second )都可以收到 父组件</p><ul><li>使用 createContext() 创建了一个 名为 TestContext 的对象</li><li>用 createContext() 创建的对象中的 Provider 去包裹子组件， 也就是&lt;TestContext.Provider&gt;&lt;/TestContext.Provider&gt; 包裹子组件，用 value 传递值count1</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span>createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> First <span class="token keyword">from</span> <span class="token string">&#39;./components/LearnContext/First&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> TestContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      App\n      <span class="token operator">&lt;</span>TestContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>count1<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span>First <span class="token operator">/</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>TestContext<span class="token punctuation">.</span>Provider<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">setCount1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n        改变count1的值为<span class="token number">2</span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>子组件First</p><ul><li>需要引入 createContext() 创建的对象，也就是父级组件的 TestContext</li><li>使用useContext函数，把 TestContext 当作函数传进去，就可以获取到父级组件传过来的值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TestContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../App&#39;</span>\n<span class="token keyword">import</span> Second <span class="token keyword">from</span> <span class="token string">&quot;./Second&quot;</span>\n\n\n<span class="token keyword">function</span> <span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> testData <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>TestContext<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      First中接收count1的值<span class="token operator">:</span><span class="token punctuation">{</span>testData<span class="token punctuation">}</span>\n      <span class="token operator">&lt;</span>Second <span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> First\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>子级以下组件，如组件 Second</p><ul><li>使用步骤和First组件一样，可以说后代组件的使用步骤一样</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TestContext<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../App&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> testData <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>TestContext<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      Second中接受count1的值<span class="token operator">:</span><span class="token punctuation">{</span>testData<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Second\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>效果图：</p><p>后代组件都能接受到值</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf2566110fa946419e5b993ede85be86~tplv-k3u1fbpfcp-watermark.image?" alt="1650985758(1).png"> 点击按钮后，coun1的值变为了2</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cd01d199c45486098aad37ca7d4cb43~tplv-k3u1fbpfcp-watermark.image?" alt="1650985836(1).png"></p><h3 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h3><p>本文是个人的学习总结，如果对你有所帮助我很开心，如果有错误或建议欢迎指出！</p>',21),p={href:"https://zh-hans.reactjs.org/docs/hooks-effect.html",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("react官网：https://zh-hans.reactjs.org/docs/hooks-effect.html"),c={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[(0,t._)("a",p,[o,(0,t.Wm)(a)])])],64)}}}}]);